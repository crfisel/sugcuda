/*
 * utilities.h
 *
 *  Created on: Jan 14, 2012
 *      Author: C. Richard Fisel
 */

#ifndef UTILITIES_H_
#define UTILITIES_H_

#include <cuda.h>
#include "bitwise.h"

__forceinline__ __device__ bool lock_location(int iAddy, GridBitWise* gbwBits, int* pigBits)
{
	bool lockSuccess = false;

	// unpack grid bits
	gbwBits->asInt = pigBits[iAddy];

	// test if square is unlocked
	if (gbwBits->asBits.isLocked == 0) {

		// if so, make a copy, but indicating locked
		GridBitWise gbwBitsCopy;
		gbwBitsCopy.asInt = gbwBits->asInt;
		gbwBitsCopy.asBits.isLocked = 1;

		// now lock the address if possible
		int iLocked = atomicCAS(&(pigBits[iAddy]),gbwBits->asInt,gbwBitsCopy.asInt);

		// test if the lock worked
		if (iLocked == gbwBits->asInt) {
			lockSuccess = true;
			gbwBits->asInt = gbwBitsCopy.asInt;
		}
	}
	return lockSuccess;
}


__forceinline__ __device__ void remove_resident(int* piBits, int iAddy, int* pigResidents, int iAgentID)
{
	// convert to bitwise
	GridBitWise gbwTemp;
	gbwTemp.asInt = *piBits;

	// find match starting at end of list
	short k = --gbwTemp.asBits.occupancy;

	// remove current id - if not at the end, replace it with the one from the end and store -1 at end
	if (pigResidents[iAddy*MAX_OCCUPANCY+k] == iAgentID) {
		pigResidents[iAddy*MAX_OCCUPANCY+k] = -1;
	} else {
		while (pigResidents[iAddy*MAX_OCCUPANCY+k] != iAgentID && k >= 0) {k--;}
		if (k != gbwTemp.asBits.occupancy) {
			pigResidents[iAddy*MAX_OCCUPANCY+k] = pigResidents[iAddy*MAX_OCCUPANCY+gbwTemp.asBits.occupancy];
			pigResidents[iAddy*MAX_OCCUPANCY+gbwTemp.asBits.occupancy] = -1;
		}
	}
	*piBits = gbwTemp.asInt;
}

__forceinline__ __device__ void insert_resident(int* piBits, int iAddy, int* pigResidents, short* psaX, short* psaY, short sXStore, short sYStore, int iAgentID)
{
	// convert to bitwise
	GridBitWise gbwTemp;
	gbwTemp.asInt = *piBits;

	// make sure we are replacing an "empty" placemarker
	if (pigResidents[iAddy*MAX_OCCUPANCY+gbwTemp.asBits.occupancy] == -1) {
		psaX[iAgentID] = sXStore;
		psaY[iAgentID] = sYStore;
		pigResidents[iAddy*MAX_OCCUPANCY+gbwTemp.asBits.occupancy] = iAgentID;

		// increment occupancy at new address
		gbwTemp.asBits.occupancy++;
	} else {

		//otherwise notify about the error
		printf ("agent %d replaced %d at x:%d y:%d \n",
			iAgentID,pigResidents[iAddy*MAX_OCCUPANCY+gbwTemp.asBits.occupancy],sXStore,sYStore);
	}
	*piBits = gbwTemp.asInt;
}

#endif /* UTILITIES_H_ */
